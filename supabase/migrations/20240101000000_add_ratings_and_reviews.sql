-- Create the reviews table
CREATE TABLE reviews (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  product_id BIGINT REFERENCES products(id) ON DELETE CASCADE,
  rating INT CHECK (rating >= 1 AND rating <= 5),
  comment TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  UNIQUE(user_id, product_id)
);

-- Add RLS policies for the reviews table
ALTER TABLE reviews ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can insert their own reviews" ON reviews FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own reviews" ON reviews FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Users can delete their own reviews" ON reviews FOR DELETE USING (auth.uid() = user_id);
CREATE POLICY "Everyone can read reviews" ON reviews FOR SELECT USING (true);

-- Add a function to calculate average rating for a product
CREATE OR REPLACE FUNCTION calculate_average_rating(product_id BIGINT)
RETURNS NUMERIC AS $$
DECLARE
  avg_rating NUMERIC;
BEGIN
  SELECT AVG(rating)::NUMERIC(3,2) INTO avg_rating
  FROM reviews
  WHERE reviews.product_id = $1;
  RETURN avg_rating;
END;
$$ LANGUAGE plpgsql;

-- Add average_rating column to products table
ALTER TABLE products ADD COLUMN average_rating NUMERIC(3,2);

-- Update products table with current average ratings
UPDATE products
SET average_rating = calculate_average_rating(id);

-- Create a trigger to update average_rating when a review is added, updated, or deleted
CREATE OR REPLACE FUNCTION update_product_average_rating()
RETURNS TRIGGER AS $$
BEGIN
  IF TG_OP = 'DELETE' THEN
    UPDATE products
    SET average_rating = calculate_average_rating(OLD.product_id)
    WHERE id = OLD.product_id;
  ELSE
    UPDATE products
    SET average_rating = calculate_average_rating(NEW.product_id)
    WHERE id = NEW.product_id;
  END IF;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_product_rating
AFTER INSERT OR UPDATE OR DELETE ON reviews
FOR EACH ROW EXECUTE FUNCTION update_product_average_rating();

