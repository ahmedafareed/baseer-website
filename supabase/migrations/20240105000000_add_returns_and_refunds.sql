-- Create the return_requests table
CREATE TABLE return_requests (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT REFERENCES orders(id) ON DELETE CASCADE,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  reason TEXT NOT NULL,
  status TEXT NOT NULL DEFAULT 'pending',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Create the refund_requests table
CREATE TABLE refund_requests (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT REFERENCES orders(id) ON DELETE CASCADE,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  reason TEXT NOT NULL,
  amount NUMERIC(10, 2) NOT NULL,
  status TEXT NOT NULL DEFAULT 'pending',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Add RLS policies for return_requests
ALTER TABLE return_requests ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own return requests"
  ON return_requests FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own return requests"
  ON return_requests FOR INSERT
  WITH CHECK (auth.uid() = user_id);

-- Add RLS policies for refund_requests
ALTER TABLE refund_requests ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own refund requests"
  ON refund_requests FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own refund requests"
  ON refund_requests FOR INSERT
  WITH CHECK (auth.uid() = user_id);

-- Function to check if an order is eligible for return or refund
CREATE OR REPLACE FUNCTION is_order_eligible_for_return_or_refund(order_id BIGINT)
RETURNS BOOLEAN AS $$
DECLARE
  order_date TIMESTAMP;
  current_date TIMESTAMP := CURRENT_TIMESTAMP;
BEGIN
  SELECT created_at INTO order_date
  FROM orders
  WHERE id = order_id;

  -- Check if the order is within 30 days
  RETURN (current_date - order_date) <= INTERVAL '30 days';
END;
$$ LANGUAGE plpgsql;

